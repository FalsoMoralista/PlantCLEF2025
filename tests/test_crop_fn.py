import PIL
from PIL import Image
import numpy as np
import os
import sys
# setting path to the repository root
sys.path.append('../')

from torchvision import datasets, transforms
import torch.nn.functional as F
from timm.data import create_transform
import torch
import torch.nn as nn
import math
from src.helper import print_tensor_size
from util.crop import GridCropAndResize
import matplotlib.pyplot as plt

import torch
import torch.nn as nn
import torch.nn.functional as F

def visualize_crops(crops_tensor, max_crops=36, grid_size=None, title=None):
    """
    Visualize a subset of the crops generated by GridCropAndResize
    
    Args:
        crops_tensor: Tensor of shape [num_crops, channels, height, width]
        max_crops: Maximum number of crops to display
        grid_size: Optional tuple (rows, cols) for custom grid layout
        title: Optional title for the plot
    """
    num_crops = crops_tensor.shape[0]
    
    # Determine how many crops to display
    n_display = min(num_crops, max_crops)
    
    # Calculate grid dimensions if not provided
    if grid_size is None:
        grid_cols = int(math.sqrt(n_display))
        grid_rows = int(math.ceil(n_display / grid_cols))
    else:
        grid_rows, grid_cols = grid_size
        
    # Create figure
    plt.figure(figsize=(16, 16))
    
    # Plot each crop
    for i in range(n_display):
        if i >= grid_rows * grid_cols:
            break
            
        # Get crop and convert to numpy for matplotlib
        crop = crops_tensor[i].permute(1, 2, 0).cpu().numpy()  # Change from [C,H,W] to [H,W,C]
        
        # Normalize if needed (if values are outside [0,1])
        if crop.max() > 1.0 or crop.min() < 0.0:
            crop = crop - crop.min()
            crop = crop / crop.max()
        
        # Create subplot
        plt.subplot(grid_rows, grid_cols, i + 1)
        plt.imshow(crop)
        plt.title(f"Crop {i}")
        plt.axis('off')
    
    # Add overall title if provided
    if title:
        plt.suptitle(title, fontsize=16)
    
    plt.tight_layout()
    plt.subplots_adjust(top=0.95 if title else 1.0)
    plt.savefig('crop_test_vectorized_function.png', dpi=300)

def main():
    test_dir = '/home/rtcalumby/adam/luciano/PlantCLEF2025/test_dataset/'
    image_list = os.listdir(test_dir)
    print('Images:', len(image_list))
    
    transform = transforms.Compose([
        transforms.Resize((1024, 1024), interpolation=PIL.Image.BICUBIC), # 2816x2816 
        transforms.ToTensor(),  # Convert to tensor: (C, H, W)
        GridCropAndResize(crop_size=256),
    ])

    transform = transforms.Compose([
        transforms.Resize(1024, interpolation=PIL.Image.BICUBIC), # 2816x2816 
        transforms.CenterCrop(1024),
        transforms.ToTensor(),  # Convert to tensor: (C, H, W)
        GridCropAndResize(crop_size=256),
    ])
    
    for image in image_list:
        print('Img name:', image)
        im = Image.open(test_dir+image)
        im = transform(im)
        break        
    print_tensor_size(im)
    visualize_crops(im)        


    
main()